plugins {
    id 'com.android.application'
    id 'com.huawei.agconnect'
}

android {
    namespace 'com.lhl.playsdk'
    compileSdk 32

    defaultConfig {
        applicationId "com.lhl.playsdk"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        config {
            keyAlias "play"
            keyPassword "123456"
            storeFile file("../Untitled")
//            storeFile file("../key/keystory.keystore")
            storePassword "123456"
//            storeFile file("../playbox.jks")
//            storePassword "playbox2022"
//            keyAlias "key0"
//            keyPassword "playbox2022"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.config
            minifyEnabled true
            shrinkResources true   // 移除无用的resource文件 依赖于minifyEnabled
            jniDebuggable false
            renderscriptDebuggable false
            debuggable false
            zipAlignEnabled true
            proguardFiles 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.config
//            minifyEnabled true
//            shrinkResources true   // 移除无用的resource文件 依赖于minifyEnabled
//            jniDebuggable false
//            renderscriptDebuggable false
//            debuggable false
//            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }
}

project.afterEvaluate {
    // 步骤说明 ： 新建一个任务，名字叫作 "modifyVersion"
//    var modifyVersion = project.tasks.register<ModifyVersion>("modifyVersion") {
//        println  'dadadadaad'
//    }.get()
    // 步骤说明 ： 获取打包任务
    var assembleTask = tasks.findByName("shrinkReleaseRes")

    // 步骤说明 ： 设置任务之间的依赖
//    assembleTask.dependsOn(createTask1)
    assembleTask = tasks.findByName("mergeReleaseJavaResource")
    assembleTask.finalizedBy(delete)
//    assembleTask = tasks.findByName("optimizeReleaseResources")
//    assembleTask.finalizedBy(manifest)
}
def Task createTask1 = task(createTask1)
createTask1.doLast {
    println "直接以一个任务名字创建任务"
}

def Task delete = task(delete)
delete.doLast {
    println "开始合成"
    var aaptFile = new File(project.buildDir, "intermediates/aapt_proguard_file/release/aapt_rules.txt")
    if (aaptFile.exists()) {
        println "开始删除文件"
        aaptFile.delete()
    }


//    //删除系统默认的 native keep规则
//    var defaultFile = File(project.buildDir, "intermediates/proguard-files")
//    defaultFile.listFiles()?.forEach {
//        var content = it.readText()
//        content = content.replace(nativeKeep, "")
//        it.writeText(content)
//    }
}
//task aa{
//    println "aaaaa"
//}


def manifest = task(manifest)
manifest.doLast {
    var mappingFile = new File("proguardMapping.txt")
    if (!mappingFile.exists()) {
        println("mapping file not exits")
        return
    }
    var map = parsMapping(mappingFile)
    if( !new File("build/intermediates/merged_manifest/release/AndroidManifest.xml").exists()){
        println("不存在清单文件")
        return
    }
    for (String key:map.keySet()){
        String cmd =  "sed -i \"s/${key}/${map.get(key)}/g\" build/intermediates/merged_manifest/release/AndroidManifest.xml"
        println(cmd)
        BufferedReader reader = new BufferedReader(new InputStreamReader(Runtime.runtime.exec(cmd).inputStream))
        String line
        while ((line = reader.readLine())!=null)
            println(line+'=========')
        reader.close()
        cmd = "sed -i \"s/${key}/${map.get(key)}/g\" build/intermediates/merged_manifests/release/AndroidManifest.xml"
        println(cmd)
        Runtime.runtime.exec(cmd)
    }
//
//    val manifestFile = File(project.buildDir, "intermediates/library_manifest/$buildType/AndroidManifest.xml")
//    if (!manifestFile.exists()) {
//        println("androidManifest file not exits")
//        return@doTask
//    }
//
//    var content = manifestFile.readText()
//    content = content.replace("\$", "inner")
//
//    map.forEach {
//        val keyStr = it.key.replace("\$", "inner")
//        val valueStr = it.value.replace("\$", "inner")
//        content = content.replace(keyStr, valueStr)
//    }
//    content = content.replace("inner", "\$")
//
//    manifestFile.writeText(content)
}

Map<String, String> parsMapping(File files) {
    Map<String, String> map = new HashMap<>()
    if (!files.exists())
        return map
    BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(files)))
    String line;
    while ((line = reader.readLine()) != null) {
        if (line.isEmpty() || line.startsWith(" "))
            continue
        if(!line.startsWith("com.lhl"))
            continue
        String[] splits = line.split(" -> ")
        if(splits.length<2){
//            println(line)
            continue
        }
//        println("${splits[0]}:${splits[1].substring(0,splits[1].length()-1)}")
        map.put(splits[0],splits[1].substring(0,splits[1].length()-1))
    }
//    com.google.gson.internal.bind.TypeAdapters$34 -> com.google.gson.internal.bind.cccc$ff:
    reader.close()
//    println(map)
    return map
}


dependencies {

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "com.squareup.retrofit2:retrofit:2.9.0";
    implementation "com.squareup.retrofit2:converter-gson:2.9.0";
    implementation "com.squareup.okhttp3:logging-interceptor:3.14.9";
//    implementation 'com.lhl.login:login:1.0.0'
    implementation 'com.lhl.security:security:1.0.0'
//    implementation 'com.app.live:linkvui:2.0.1'
    implementation project(':game')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}